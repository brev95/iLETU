(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
templates['alertMessage'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1, foundHelper;
  foundHelper = helpers.alertType;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.alertType; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  return escapeExpression(stack1);}

function program3(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "data-messageid=\"";
  foundHelper = helpers.messageId;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.messageId; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"";
  return buffer;}

function program5(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n        <a class=\"close\" href=\"#\" ";
  stack1 = depth0.messageId;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(6, program6, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">&times;</a>\n    ";
  return buffer;}
function program6(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "data-closeid=\"";
  foundHelper = helpers.messageId;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.messageId; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"";
  return buffer;}

  buffer += "\n<div class=\"alert-message ";
  stack1 = depth0.alertType;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" ";
  stack1 = depth0.messageId;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">\n    ";
  stack1 = depth0.showClose;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(5, program5, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <p class=\"alert-icon\">";
  foundHelper = helpers.text;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.text; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n</div>";
  return buffer;});
templates['simpleLink'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += " class=\"";
  foundHelper = helpers.elClass;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.elClass; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" ";
  return buffer;}

function program3(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "title=\"";
  foundHelper = helpers.title;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" ";
  return buffer;}

function program5(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "data-publicid=\"";
  foundHelper = helpers.publicid;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.publicid; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"";
  return buffer;}

  buffer += "\n<a href=\"";
  foundHelper = helpers.href;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.href; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"";
  stack1 = depth0.elClass;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = depth0.title;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  foundHelper = helpers.attrs;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.attrs; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  stack1 = depth0.publicid;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(5, program5, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">";
  foundHelper = helpers.text;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.text; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</a>";
  return buffer;});
templates['simpleSpan'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "class=\"";
  foundHelper = helpers.elClass;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.elClass; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"";
  return buffer;}

  buffer += "\n<span ";
  stack1 = depth0.elClass;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += ">";
  foundHelper = helpers.text;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.text; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</span>";
  return buffer;});
templates['loader'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var stack1, foundHelper;
  foundHelper = helpers.loaderClass;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.loaderClass; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  return escapeExpression(stack1);}

  buffer += "<div class=\"loader ";
  stack1 = depth0.loaderClass;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\"></div>";
  return buffer;});
templates['tbTooltip'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n<div class=\"actions\">\n    ";
  stack1 = depth0.callToAction;
  stack1 = helpers.each.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.programWithDepth(program2, data, depth0)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>\n";
  return buffer;}
function program2(depth0,data,depth1) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n    <button id=\"";
  stack1 = depth1.tooltipName;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "-";
  foundHelper = helpers.name;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" href=\"#\" data-response=\"";
  foundHelper = helpers.name;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" class=\"btn ";
  foundHelper = helpers.className;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.className; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + " imp-cta-response\">";
  foundHelper = helpers.message;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</button>\n    ";
  return buffer;}

  buffer += "<a id=\"";
  foundHelper = helpers.tooltipName;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.tooltipName; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "-ignore\" href=\"#\" class=\"floating-close close-overlay-btn imp-cta-response\" data-response=\"ignore\" data-overlayname=\"";
  foundHelper = helpers.tooltipName;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.tooltipName; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n    &times;\n</a>\n<p id=\"";
  foundHelper = helpers.tooltipName;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.tooltipName; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "-message\" class=\"instructions\">";
  foundHelper = helpers.message;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</p>\n";
  stack1 = depth0.callToAction;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n\n<div class=\"tb-pointer\"></div>";
  return buffer;});
templates['visitorExperienceScroller'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this, blockHelperMissing=helpers.blockHelperMissing;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n        ";
  foundHelper = helpers.sharer;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.sharer; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + " used StumbleUpon to discover this cool stuff:\n    ";
  return buffer;}

function program3(depth0,data) {
  
  
  return "\n        Use StumbleUpon to discover cool stuff like this:\n    ";}

function program5(depth0,data) {
  
  var buffer = "", stack1, stack2, foundHelper;
  buffer += "\n                <li id=\"item-";
  foundHelper = helpers.id;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" class=\"scroll-item\" data-cid=\"";
  foundHelper = helpers.id;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n                    <a class=\"recommendation-link\" href=\"#\">\n                        <img class=\"recommendation-image\" src=\"";
  foundHelper = helpers.thumbnail;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.thumbnail; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" width=\"183\" height=\"119\">\n                        <span class=\"recommendation-title\" title=\"";
  foundHelper = helpers.title;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">";
  stack1 = depth0.title;
  stack2 = {};
  stack2['max'] = 35;
  foundHelper = helpers.truncate;
  stack1 = foundHelper ? foundHelper.call(depth0, stack1, {hash:stack2}) : helperMissing.call(depth0, "truncate", stack1, {hash:stack2});
  buffer += escapeExpression(stack1) + "</span>\n                        <span class=\"recommendation-message\" title=\"";
  foundHelper = helpers.message;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">";
  stack1 = depth0.message;
  stack2 = {};
  stack2['max'] = 18;
  foundHelper = helpers.truncate;
  stack1 = foundHelper ? foundHelper.call(depth0, stack1, {hash:stack2}) : helperMissing.call(depth0, "truncate", stack1, {hash:stack2});
  buffer += escapeExpression(stack1) + "</span>\n                    </a>\n                </li>\n            ";
  return buffer;}

  buffer += "<h2 class=\"recommendations-title\">\n    ";
  stack1 = depth0.sharer;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</h2>\n<div id=\"horizontal-scroller\" class=\"horizontal-scroller\">\n    <a href=\"#\" class=\"scroller-arrow previous-arrow\" data-action=\"previous\"><span class=\"scroller-icon\">Previous</span></a>\n    <div id=\"horizontal-scroller-viewport\" class=\"horizontal-scroller-wrap\">\n        <ul id=\"horizontal-scroller-items\" class=\"horizontal-scroller-content\">\n            ";
  foundHelper = helpers.recs;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{},inverse:self.noop,fn:self.program(5, program5, data)}); }
  else { stack1 = depth0.recs; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  if (!helpers.recs) { stack1 = blockHelperMissing.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(5, program5, data)}); }
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </ul>\n    </div>\n    <a href=\"#\" class=\"scroller-arrow next-arrow\" data-action=\"next\"><span class=\"scroller-icon\">Next</span></a>\n</div>";
  return buffer;});
templates['progressBar'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n                <span class=\"stop ";
  stack1 = depth0.passed;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(2, program2, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  stack1 = depth0.active;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(4, program4, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" style=\"left: ";
  foundHelper = helpers.percent;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.percent; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "%;\">";
  stack1 = depth0.active;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(6, program6, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "<span class=\"star\"></span></span>\n                ";
  return buffer;}
function program2(depth0,data) {
  
  
  return "passed";}

function program4(depth0,data) {
  
  
  return "active";}

function program6(depth0,data) {
  
  var stack1, foundHelper;
  foundHelper = helpers.count;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.count; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  return escapeExpression(stack1);}

  buffer += "<div class=\"progress-content\">\n    <h1 class=\"progress-message\">";
  foundHelper = helpers.message;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</h1>\n    <div class=\"progress-wrap\">\n        <div class=\"progress-wrap-inner\">\n            <div class=\"progress-bg\"></div>\n            <div class=\"progress-remain\" style=\"width: ";
  stack1 = depth0.state;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.percent;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "%;\"></div>\n            <div class=\"progress-stops\">\n                ";
  stack1 = depth0.stops;
  stack1 = helpers.each.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </div>\n        </div>\n    </div>\n</div>";
  return buffer;});
templates['onError'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n    <h4 class=\"no-results-body\">";
  foundHelper = helpers.message;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.message; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</h4>\n    ";
  return buffer;}

  buffer += "<div class=\"no-results\">\n    <h3 class=\"no-results-heading\">Oh no! Something went wrong.</h3>\n    ";
  stack1 = depth0.message;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>";
  return buffer;});
templates['dropdown'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "placeholder=\"";
  foundHelper = helpers.placeholder;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.placeholder; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"";
  return buffer;}

function program3(depth0,data) {
  
  var buffer = "", stack1, stack2, foundHelper;
  buffer += "\n    ";
  stack1 = {};
  stack1['template'] = "dropdownList";
  stack2 = depth0.items;
  stack1['items'] = stack2;
  stack2 = depth0.viewCid;
  stack1['viewCid'] = stack2;
  stack2 = depth0.allowCreate;
  stack1['allowCreate'] = stack2;
  foundHelper = helpers.subtemplate;
  stack1 = foundHelper ? foundHelper.call(depth0, {hash:stack1}) : helperMissing.call(depth0, "subtemplate", {hash:stack1});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  return buffer;}

  buffer += "<div class=\"dropdown\" data-cid=\"";
  foundHelper = helpers.viewCid;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.viewCid; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n    <input type=\"text\" class=\"dropdown-search\" ";
  stack1 = depth0.placeholder;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n    <div class=\"spinner\"></div>\n    ";
  stack1 = depth0.absolute;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>";
  return buffer;});
templates['dropdownList'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "absolute";}

function program3(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n                    <li class=\"dropdown-item ";
  stack1 = depth0.preSelected;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(4, program4, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-cid=\"";
  foundHelper = helpers.cid;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.cid; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n                        <span>";
  foundHelper = helpers.valueBefore;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.valueBefore; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1);
  stack1 = depth0.valueToBold;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(6, program6, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  foundHelper = helpers.value;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.value; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</span>\n                    </li>\n                ";
  return buffer;}
function program4(depth0,data) {
  
  
  return "s-active";}

function program6(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "<strong>";
  foundHelper = helpers.valueToBold;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.valueToBold; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</strong>";
  return buffer;}

function program8(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                    ";
  stack1 = depth0.query;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(9, program9, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  return buffer;}
function program9(depth0,data) {
  
  var buffer = "", stack1;
  buffer += "\n                        ";
  stack1 = depth0.match;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(10, program10, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                    ";
  return buffer;}
function program10(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n                            <li class=\"dropdown-item dropdown-create-new\"><span>+ <strong>\"";
  foundHelper = helpers.query;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.query; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"</strong> (create new)</span></li>\n                        ";
  return buffer;}

  buffer += "<div class=\"dropdown-items-wrap ";
  stack1 = depth0.absolute;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\" data-cid=\"";
  foundHelper = helpers.viewCid;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.viewCid; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n    <div class=\"antiscroll-wrap\">\n        <div class=\"antiscroll-inner\">\n            <ul class=\"dropdown-items\">\n                ";
  stack1 = depth0.items;
  stack1 = helpers.each.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n                ";
  stack1 = depth0.allowCreate;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(8, program8, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </ul>\n        </div>\n    </div>\n</div>";
  return buffer;});
templates['popup'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n    <h1 class=\"modal-title tk-header\">";
  foundHelper = helpers.title;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</h1>\n    ";
  return buffer;}

function program3(depth0,data) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n    <h2 class=\"modal-subtitle\">";
  foundHelper = helpers.subTitle;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.subTitle; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "</h2>\n    ";
  return buffer;}

function program5(depth0,data) {
  
  
  return "\n    <a href=\"javascript:void(0);\" class=\"modal-close\">&times;</a>\n    ";}

function program7(depth0,data) {
  
  
  return "\n            <a href=\"javascript:void(0);\" class=\"modal-close\">&times;</a>\n            ";}

  buffer += "<header class=\"modal-header hidden\">\n    ";
  stack1 = depth0.title;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  stack1 = depth0.subTitle;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    ";
  stack1 = depth0.noCloseButton;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(5, program5, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</header>\n<div class=\"modal-body\"></div>\n<div class=\"loading hidden\"></div>\n<div class=\"modal-context hidden\">\n    <div class=\"modal-outer\">\n        <div class=\"modal-inner\">\n            ";
  stack1 = depth0.noCloseButton;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(7, program7, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            <span class=\"modal-context-message\"></span>\n        </div>\n    </div>\n</div>";
  return buffer;});
templates['modal'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, self=this, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  
  return "animate";}

  buffer += "<div class=\"modal-view ";
  stack1 = depth0.animate;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " ";
  foundHelper = helpers.modalClass;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.modalClass; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n    <div class=\"modal-outer\">\n        <div class=\"modal-inner\">\n            <div class=\"modal-wrap\">\n                ";
  stack1 = {};
  stack1['template'] = "popup";
  stack2 = depth0.title;
  stack1['title'] = stack2;
  stack2 = depth0.subTitle;
  stack1['subTitle'] = stack2;
  stack2 = depth0.noCloseButton;
  stack1['noCloseButton'] = stack2;
  foundHelper = helpers.subtemplate;
  stack1 = foundHelper ? foundHelper.call(depth0, {hash:stack1}) : helperMissing.call(depth0, "subtemplate", {hash:stack1});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            </div>\n        </div>\n    </div>\n</div>";
  return buffer;});
templates['tileListEditCard'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var stack1, self=this, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;

function program1(depth0,data,depth1) {
  
  var buffer = "", stack1, foundHelper;
  buffer += "\n<div class=\"list-edit-form-wrapper ";
  stack1 = depth1.modal;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(2, program2, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n    ";
  stack1 = depth1.modal;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(4, program4, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    <fieldset class=\"list-edit-form\">\n        <div class=\"tile-list-card-thumb-wrap\">\n            <img class=\"tile-list-card-thumb\" id=\"list-cover\" src=\"";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.thumbs;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.large;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\" height=\"90\" width=\"135\">\n            <a href=\"";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.owner;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\" class=\"tile-list-card-attribution\">\n                <img class=\"tile-list-card-attribution-user-thumb\" src=\"";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.owner;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.thumbs;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.small;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\" height=\"25\" width=\"25\">\n                <span class=\"tile-list-card-attribution-created-by\">Created by</span>\n                <span class=\"tile-list-card-attribution-username\">";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.owner;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.username;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "</span>\n            </a>\n        </div>\n        ";
  stack1 = depth1.modal;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(6, program6, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        <div class=\"list-edit-columns\">\n            <div class=\"list-edit-col-left\">\n                <div class=\"wrapper-input\">\n                    <label class=\"header-label\" for=\"list-name\">Title</label>\n                    <div class=\"header-input\">\n                        <input type=\"text\" id=\"list-name\" class=\"list-edit-title\" value=\"";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.namePretty;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\" maxlength=\"70\"><br>\n                        <em class=\"help-text\">70 characters max</em>\n                    </div>\n                </div>\n                <div class=\"wrapper-input\">\n                    <label class=\"header-label header-label-inline\">Visibility</label>\n                    <div class=\"header-input inline\">\n                        <label for=\"list-public\">\n                            <input type=\"radio\" name=\"visibility\" id=\"list-public\" value=\"public\" ";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.visibility;
  foundHelper = helpers.ifEqual;
  stack1 = foundHelper ? foundHelper.call(depth0, stack1, "public", "checked", {hash:{}}) : helperMissing.call(depth0, "ifEqual", stack1, "public", "checked", {hash:{}});
  buffer += escapeExpression(stack1) + ">\n                            Public\n                        </label>\n                        <label for=\"list-private\">\n                            <input type=\"radio\" name=\"visibility\" id=\"list-private\" value=\"private\" ";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.visibility;
  foundHelper = helpers.ifEqual;
  stack1 = foundHelper ? foundHelper.call(depth0, stack1, "private", "checked", {hash:{}}) : helperMissing.call(depth0, "ifEqual", stack1, "private", "checked", {hash:{}});
  buffer += escapeExpression(stack1) + ">\n                            Private\n                        </label>\n                    </div>\n                </div>\n            </div>\n            <div class=\"list-edit-col-right\">\n                <div class=\"wrapper-input\">\n                    <label class=\"header-label\" for=\"list-description\">Description</label>\n                    <div class=\"header-input\">\n                        <textarea id=\"list-description\" class=\"list-edit-description\" maxlength=\"250\">";
  stack1 = depth0.data;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.description;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "</textarea><br>\n                        <em class=\"help-text\">250 characters max</em>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"list-edit-actions\">\n            <button href=\"javascript:void(0)\" class=\"btn primary action list-edit-btn\" id=\"list-save\">Save</button>\n            <button href=\"javascript:void(0)\" class=\"btn secondary list-edit-btn\" id=\"list-cancel\">Cancel</button>\n            ";
  stack1 = depth1.modal;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(8, program8, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n        </div>\n    </fieldset>\n</div>\n";
  return buffer;}
function program2(depth0,data) {
  
  
  return "view-modal";}

function program4(depth0,data) {
  
  
  return "\n    <div class=\"dna-bar\"></div>\n    ";}

function program6(depth0,data) {
  
  
  return "\n        <h1 id=\"dialog-header\" class=\"list-edit-header\">Edit List</h1>\n        ";}

function program8(depth0,data) {
  
  
  return "\n            <button href=\"javascript:void(0)\" class=\"btn action list-edit-btn\" id=\"list-delete\">Delete</button>\n            ";}

  stack1 = depth0.data;
  stack1 = helpers['with'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.programWithDepth(program1, data, depth0)});
  if(stack1 || stack1 === 0) { return stack1; }
  else { return ''; }});
templates['listEdit'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;

function program1(depth0,data) {
  
  var stack1, foundHelper;
  foundHelper = helpers.description;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.description; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  return escapeExpression(stack1);}

function program3(depth0,data) {
  
  var buffer = "", stack1, stack2, foundHelper;
  buffer += "\n                <input type=\"radio\" name=\"visibility\" id=\"list-edit-public\" value=\"public\" ";
  stack1 = depth0.visibility;
  stack2 = {};
  stack2['compare'] = "public";
  foundHelper = helpers.if_eq;
  stack1 = foundHelper ? foundHelper.call(depth0, stack1, {hash:stack2,inverse:self.noop,fn:self.program(4, program4, data)}) : helperMissing.call(depth0, "if_eq", stack1, {hash:stack2,inverse:self.noop,fn:self.program(4, program4, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n            ";
  return buffer;}
function program4(depth0,data) {
  
  
  return "checked";}

function program6(depth0,data) {
  
  
  return "\n                <input type=\"radio\" name=\"visibility\" id=\"list-edit-public\" value=\"public\" checked/>\n            ";}

function program8(depth0,data) {
  
  
  return "checked";}

function program10(depth0,data) {
  
  
  return "Create";}

function program12(depth0,data) {
  
  
  return "Save";}

function program14(depth0,data) {
  
  
  return "secondary";}

function program16(depth0,data) {
  
  
  return "\n        <button href=\"javascript:void(0)\" class=\"btn secondary list-edit-btn left\" id=\"list-destroy\">Delete List</button>\n        ";}

  buffer += "<form class=\"form-modal\">\n    <div class=\"wrapper-input\">\n        <label for=\"list-edit-name\">Name</label>\n        <input type=\"text\" value=\"";
  foundHelper = helpers.name;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.name; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" id=\"list-edit-name\" maxlength=\"70\"/>\n    </div>\n    <div class=\"wrapper-input\">\n        <label for=\"list-edit-description\">Description</label>\n        <textarea id=\"list-edit-description\">";
  stack1 = depth0.description;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</textarea>\n    </div>\n\n    <div class=\"wrapper-input\">\n        <label for=\"list-edit-visibility\">Visibility</label>\n        <label for=\"list-edit-public\" class=\"label-inline\">\n            ";
  stack1 = depth0.visibility;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            ";
  stack1 = depth0.visibility;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(6, program6, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n            Public\n        </label>\n        <label for=\"list-edit-private\" class=\"label-inline\">\n            <input type=\"radio\" name=\"visibility\" id=\"list-edit-private\" value=\"private\" ";
  stack1 = depth0.visibility;
  stack2 = {};
  stack2['compare'] = "private";
  foundHelper = helpers.if_eq;
  stack1 = foundHelper ? foundHelper.call(depth0, stack1, {hash:stack2,inverse:self.noop,fn:self.program(8, program8, data)}) : helperMissing.call(depth0, "if_eq", stack1, {hash:stack2,inverse:self.noop,fn:self.program(8, program8, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "/>\n            Private\n        </label>\n    </div>\n\n    <div class=\"modal-actions\">\n        <button href=\"javascript:void(0)\" class=\"btn primary action list-edit-btn right\" id=\"list-save\">";
  stack1 = depth0.isNew;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.program(12, program12, data),fn:self.program(10, program10, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "</button>\n        <button href=\"javascript:void(0)\" class=\"btn ";
  stack1 = depth0.isNew;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(14, program14, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += " list-edit-btn right\" id=\"list-cancel\">Cancel</button>\n        ";
  stack1 = depth0.isNew;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(16, program16, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n</form>";
  return buffer;});
templates['litebarOverlay'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, helperMissing=helpers.helperMissing;


  buffer += "<div class=\"litebar-overlay-content\">\n    ";
  stack1 = {};
  stack1['template'] = "popup";
  stack2 = depth0.title;
  stack1['title'] = stack2;
  stack2 = depth0.noCloseButton;
  stack1['noCloseButton'] = stack2;
  foundHelper = helpers.subtemplate;
  stack1 = foundHelper ? foundHelper.call(depth0, {hash:stack1}) : helperMissing.call(depth0, "subtemplate", {hash:stack1});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n</div>";
  return buffer;});
templates['signin'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression, self=this;

function program1(depth0,data) {
  
  
  return "right inline";}

function program3(depth0,data) {
  
  
  return "\n            <button class=\"btn secondary right\" id=\"back\">Back</button>\n        ";}

  buffer += "<form action=\"";
  stack1 = depth0.uri;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\" method=\"post\" class=\"form-modal large\">\n    <div class=\"wrapper-input\">\n        <label for=\"username\">Your Email or Username</label>\n        <input type=\"text\" name=\"user\" id=\"username\"/>\n    </div>\n    <div class=\"wrapper-input\">\n        <label for=\"password\">Your Password</label>\n        <input type=\"password\" name=\"pass\" id=\"password\"/>\n    </div>\n    <div class=\"left\"><a href=\"/reset-password\">Forgot your password?</a></div>\n    <input type=\"hidden\" name=\"_token\" id=\"token\" value=\"";
  stack1 = depth0.uri;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.token;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "\"/>\n    <input type=\"hidden\" name=\"_action\" value=\"auth\"/>\n    <input type=\"hidden\" name=\"next\" value=\"";
  foundHelper = helpers.next;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.next; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\"/>\n    <input type=\"hidden\" name=\"nativeSubmit\" value=\"1\"/>\n\n    <div class=\"modal-actions ";
  stack1 = depth0.noBackButton;
  stack1 = helpers['if'].call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(1, program1, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\">\n        <input type=\"submit\" class=\"btn primary right\" value=\"Sign in\">\n        ";
  stack1 = depth0.noBackButton;
  stack1 = helpers.unless.call(depth0, stack1, {hash:{},inverse:self.noop,fn:self.program(3, program3, data)});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n</form>";
  return buffer;});
templates['forcedRegIndex'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, foundHelper, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<h1 class=\"signup-header tk-header\">Dive into Epic</h1>\n<p class=\"signup-text\">Torpedo boring. Escape ordinary. Surprise yourself.<br/>Stumble the best photos, videos, and websites<br/>on the entire Internet.</p>\n\n<a href=\"#\" class=\"connect-service\" data-service=\"facebook\" data-method=\"register\" data-context=\"authenticatedreferral\" data-success=\"";
  foundHelper = helpers.urlCurrent;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.urlCurrent; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\" data-fail=\"/signup\">\n    <button class=\"btn large join\">Go!</button>\n</a>\n<a href=\"javascript:void(0);\" class=\"already-member\" id=\"sign-in\">Already a member? Sign in</a>";
  return buffer;});
templates['toolbarTutorial'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"toolbar-disable-layer\"></div>\n<div class=\"toolbar-tutorial-content\">\n    <div class=\"tutorial-content-wrap\">\n        <div class=\"tutorial-content-dashes\">\n            <div class=\"tutorial-button-wrap\">\n                <div class=\"tutorial-dislike-wrap pointer-wrap\">\n                    <h2>Don't show me pages<br>like this one.</h2>\n                    <div class=\"pointer\"></div>\n                </div>\n                <div class=\"tutorial-stumble-wrap pointer-wrap\">\n                    <h2>Just show me<br>the next page.</h2>\n                    <div class=\"pointer\"></div>\n                </div>\n                <div class=\"tutorial-like-wrap pointer-wrap\">\n                    <h2>Yes! Show me more<br>pages like this one.</h2>\n                    <div class=\"pointer\"></div>\n                </div>\n                <h2>When you're ready to see your next recommendation,</br> click one of the buttons above.</h2>\n            </div>\n            <div class=\"tutorial-content-message\">\n                <div class=\"tutorial-content-message-heading\">\n                    <h1>This page is your first recommendation.</br></h1>\n                    <h2>It's from ";
  stack1 = depth0.currentStumble;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url_domain;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + " and it's about ";
  stack1 = depth0.currentStumble;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url_category;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "</h2>\n                </div>\n                <a class=\"btn large primary tutorial-complete\" href=\"javascript:void(0);\">Go</a>\n            </div>\n        </div>\n    </div>\n</div>";
  return buffer;});
templates['toolbarTutorialv2'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "<div class=\"toolbar-disable-layer\"></div>\n<div class=\"toolbar-tutorial-content\">\n    <div class=\"tutorial-content-wrap\">\n        <div class=\"tutorial-button-wrap\">\n            <div class=\"tutorial-dislike-wrap pointer-wrap\">\n                <h1>Less Like This</h1>\n                <h2>Don't like what you see? We'll show you something new and learn from what you tell us.</h2>\n                <div class=\"pointer\"></div>\n            </div>\n            <div class=\"tutorial-stumble-wrap pointer-wrap\">\n                <h1>Keep Going</h1>\n                <h2>Ready for something else? We've got lots more to show you.</h2>\n                <div class=\"pointer\"></div>\n            </div>\n            <div class=\"tutorial-like-wrap pointer-wrap\">\n                <h1>More Like This</h1>\n                <h2>Like what you see? We'll show you more, and improve your recommendations.</h2>\n                <div class=\"pointer\"></div>\n            </div>\n        </div>\n        <div class=\"tutorial-content-message\">\n            <div class=\"tutorial-content-message-heading\">\n                <h1>This page is your first recommendation.</br></h1>\n                <h2>It's from ";
  stack1 = depth0.currentStumble;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url_domain;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + " and it's about ";
  stack1 = depth0.currentStumble;
  stack1 = stack1 == null || stack1 === false ? stack1 : stack1.url_category;
  stack1 = typeof stack1 === functionType ? stack1() : stack1;
  buffer += escapeExpression(stack1) + "</h2>\n            </div>\n            <a class=\"btn large primary tutorial-complete\" href=\"javascript:void(0);\">Start</a>\n        </div>\n    </div>\n</div>";
  return buffer;});
templates['openMobileAppModal1'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<div class=\"adx-modal\">\n    <p class=\"intro\">\n        Would you like to always view links in the StumbleUpon mobile app?\n    </p>\n    <div class=\"actions\">\n        <a href=\"javascript:void(0);\" class=\"btn primary modal-close\">\n            Yes\n        </a>\n        <a href=\"javascript:void(0);\" class=\"btn secondary modal-close\">\n            No\n        </a>\n    </div>\n</div>";});
templates['openMobileAppModal2'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<div class=\"adx-modal\">\n    <p class=\"intro\">\n        For a better experience, we recommend opening this link in app.\n    </p>\n    <div class=\"actions\">\n        <a href=\"javascript:void(0);\" class=\"btn primary modal-close\">\n            Open in app\n        </a>\n        <a href=\"javascript:void(0);\" class=\"btn secondary modal-close\">\n            No, stay here\n        </a>\n    </div>\n</div>";});
templates['openMobileAppModal3'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<div class=\"adx-modal\">\n    <p class=\"intro\">\n        Would you like to view this link in app for a better experience?\n    </p>\n    <div class=\"actions\">\n        <a href=\"javascript:void(0);\" class=\"btn primary modal-close\">\n            Yes\n        </a>\n        <a href=\"javascript:void(0);\" class=\"btn secondary modal-close\">\n            No\n        </a>\n    </div>\n</div>";});
templates['toolbarTutorialList'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<h1>Add To Lists</h1>\n<p>If you find something you want to collect or remember, add it to a list. And, if your list is public, anyone who follows your list will see it.</p>\n<a class=\"close-tutorial\" href=\"javascript:void(0);\">Continue</a>";});
templates['toolbarTutorialComment'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<h1>Join The Conversation</h1>\n<p>Got something to say? Leave a comment to share your thoughts and read what others have to say, too.</p>\n<a class=\"close-tutorial\" href=\"javascript:void(0);\">Continue</a>";});
templates['toolbarTutorialShare'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<h1>Share With Friends</h1>\n<p>Find something great? Share it through Facebook, Twitter or email.</p>\n<a class=\"close-tutorial\" href=\"javascript:void(0);\">Continue</a>";});
templates['toolbarTutorialInterests'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  


  return "<h1>Explore With Filters</h1>\n<p>We have lots to show you. If you want more control, use a filter to customize your experience.</p>\n<a class=\"close-tutorial\" href=\"javascript:void(0);\">Continue</a>";});
templates['reveal'] = template(function (Handlebars,depth0,helpers,partials,data) {
  helpers = helpers || Handlebars.helpers;
  var buffer = "", stack1, stack2, foundHelper, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<div class=\"reveal-wrap fadeOut ";
  foundHelper = helpers.id;
  if (foundHelper) { stack1 = foundHelper.call(depth0, {hash:{}}); }
  else { stack1 = depth0.id; stack1 = typeof stack1 === functionType ? stack1() : stack1; }
  buffer += escapeExpression(stack1) + "\">\n    <div class=\"reveal-mask\"></div>\n    <div class=\"reveal-cont\">\n        ";
  stack1 = {};
  stack2 = depth0.template;
  stack1['template'] = stack2;
  foundHelper = helpers.subtemplate;
  stack1 = foundHelper ? foundHelper.call(depth0, {hash:stack1}) : helperMissing.call(depth0, "subtemplate", {hash:stack1});
  if(stack1 || stack1 === 0) { buffer += stack1; }
  buffer += "\n    </div>\n</div>";
  return buffer;});
})();
